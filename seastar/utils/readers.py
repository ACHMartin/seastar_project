import os
import glob
import configparser
import xarray as xr


def _readConfig(config_file_path):
    """Reads the configuration ini file.

    :param config_file_path: path to the configuration file
    :type config_file_path: ``str``

    :return: the configuration object read from the lconfiguration file
    :rtype: ``configparser``

    :meta private:
    """

    configuration = configparser.ConfigParser()
    configuration.read(config_file_path)

    return configuration


def findNetCDFilepaths(directory_path, recursive=False):
    """Returns a list of netCDF files fom a given directory with
    a recursive option.

    :param directory_path: path to the directory to look in
    :type directory_path: ``str``

    :param recursive: whether to search in sub-directories
    :type recursive: ``boolean``, optional

    :return: a list of file paths with '.nc' extension that were found
    :rtype: ``list``
    """

    if not os.path.isdir(directory_path):
        print(f'WARNING: {directory_path} is not a directory')
        return []

    netCDF_filepaths = glob.glob(pathname=directory_path+'/*.nc',
                                 recursive=recursive)

    return netCDF_filepaths


def readNetCDFFile(netCFD_path):
    """Reads a netCDF file and returns it as an xarray.

    :param netCFD_path: path to the netCDF file
    :type netCFD_path: ``str``

    :raises: ``ValueError`` if file cannot be read as netCDF and \
    returns ``None`` object

    :return: xrray read from the netCDF file
    :rtype: ``xarray``
    """

    data_xr = None
    try:
        data_xr = xr.open_dataset(netCFD_path)

    except ValueError:
        print(f'WARNING "{netCFD_path}" is not a readable netCDF file')

    return data_xr


def load_OSCAR_data(file_path, file_inds):
    """
    Load OSCAR data.

    Loads in OSCAR Fore/Mid/Aft antenna files from the path designated in
    `file_path` and file indices in `file_inds`. Returns data in a dict of
    `{file index : xarray.Dataset}`

    Parameters
    ----------
    file_path : ``str``
        Path containing OSCAR data files
    file_inds : ``list``
        List of indices of the Fore/Mid/Aft antenna data triplet within the
        file list generated by `os.listdir(file_path)`

    Returns
    -------
    ds : ``dict``, ``xarray.Dataset``
        OSCAR Fore/Mid/Aft antenna data as ``xarray.Dataset`` in a dict with
        keys as ``int`` to identify each antenna

    """
    file_list = os.listdir(file_path)
    ds = dict()
    for ind in file_inds:
        ds[ind] = readNetCDFFile(file_path + file_list[ind])
    return ds
