# -*- coding: utf-8 -*-
"""
Created on Thu Feb 16 16:26:52 2023

@author: davidmccann
"""
import os
import numpy as np
from seastar.utils.readers import readNetCDFFile
from seastar.utils.tools import list_duplicates


def load_OSCAR_data(file_path, file_inds):
    """
    Load OSCAR data.

    Loads in OSCAR Fore/Mid/Aft antenna files from the path designated in
    `file_path` and file indices in `file_inds`. Returns data in a dict of
    `{file index : xarray.Dataset}`

    Parameters
    ----------
    file_path : ``str``
        Path containing OSCAR data files
    file_inds : ``list``
        List of indices of the Fore/Mid/Aft antenna data triplet within the
        file list generated by `os.listdir(file_path)`

    Returns
    -------
    ds : ``dict``, ``xarray.Dataset``
        OSCAR Fore/Mid/Aft antenna data as ``xarray.Dataset`` in a dict with
        keys as ``int`` to identify each antenna

    """
    file_list = sorted(os.listdir(file_path))
    ds = dict()
    for ind in file_inds:
        ds[ind] = readNetCDFFile(file_path + file_list[ind])
    return ds

def identify_antenna_location(ds):
    """
    Identify ATI antenna location.

    Identifies the antenna direction in an OSCAR dataset by interrogating the
    minimum and maximum processed Doppler values.

    Parameters
    ----------
    ds : ``xarray.Dataset``
        OSCAR dataset containing MinProcessedDoppler and MaxProcessedDoppler
        variables

    Returns
    -------
    antenna_location : ``str``
        Antenna location ('Fore', 'Aft', 'Mid')

    """
    doppler_mean = np.mean([ds.MinProcessedDoppler, ds.MaxProcessedDoppler])
    if np.abs(doppler_mean) < 500:
        antenna_location = 'Mid'
    elif doppler_mean < 0:
        antenna_location = 'Aft'
    elif doppler_mean > 0:
        antenna_location = 'Fore'

    return antenna_location

def find_file_triplets(file_path):
    """
    Find file list indices of matching antenna files.

    Sorts a file list generated by `os.listdir(file_path)` and creates a list
    `file_time_triplets` of file aquisition times (YYYYMMDD'T'HHMMSS) along the
    1st column and the corresponding indices of the Fore/Mid/Aft antenna
    data files associated with each aquisition time in the 2nd column.

    Parameters
    ----------
    file_path : ``str``
        Path containing OSCAR NetCDF files

    Returns
    -------
    file_time_triplets : ``list``
        List of times of data aquisition and the corresponding indices of
        matching files in the Fore/Mid/Aft antenna triplet in the file list
        generated by `os.listdir(file_path)`
    """
    file_list = sorted(os.listdir(file_path))
    num_files = len(file_list)
    file_time = list()
    for file in range(num_files):
        file_info = str.split(file_list[file], '_')
        file_time.append(file_info[2])
    file_time_triplets = sorted(list_duplicates(file_time))
    return file_time_triplets


def antenna_idents(ds):
    """
    Build antenna identifier list.

    Generates list of antenna identifiers of the form ['Fore','Mid','Aft'] to
    correspond with keys in the dataset dictionary generated by
    `seastar.utils.readers.load_OSCAR_data`

    Parameters
    ----------
    ds : ``dict``
        OSCAR data stored as a dict with antenna number as keys and loaded
        data in ``xarray.Dataset`` format as values

    Returns
    -------
    antenna_ident : ``list``
        List of antenna identifiers in the form ['Fore', 'Mid', 'Aft'],
        corresponding to the data and keys stored in `ds`

    """
    antenna_id = list()
    for i in list(ds.keys()):
        antenna_id.append(identify_antenna_location(ds[i]))
    return antenna_id


def identify_antenna_location_from_filename(file_path, file_time_triplets):
    """
    Identify antenna from filename.

    Parameters
    ----------
    file_path : ``str``
        Local path to data files to check
    file_time_triplets : ``list``
        List of times of data aquisition and the corresponding indices of
        matching files in the Fore/Mid/Aft antenna triplet in the file list.
        Generated by ``find_file_triplets``

    Returns
    -------
    antenna_id : ``list``
        List of antenna identifiers as strings like ['Mid', 'Fore', 'Aft']

    """
    antenna_identifiers = {'0': 'Mid', '3': 'Fore', '7': 'Aft'}
    file_list = sorted(os.listdir(file_path))
    antenna_id = list()
    for i in range(len(file_time_triplets)):
        file_name = file_list[file_time_triplets[i]]
        antenna_id.append(antenna_identifiers[file_name.split('_')[5][0]])
    return antenna_id